# Выбираем базовый образ <имя>:<тег>
# Теги образов позволяют нам выбирать вариации
# Эта команда создает нулевой слой нашего образа.
FROM python:3.8-alpine
# Создаем рабочую директорию, эта команда создаст /django и перейдет в нее "cd /django".
# Эта команда создает первый слой нашего образа. Потому что она
# редактирует файлы в системе. В целом, правило большого пальца -
# "Если команда редактирует какие либо файлы, не важно как, создает, удаляет,
# меняет права доступа, то она создает новый слой.
WORKDIR /django
# Делаем установку базовых зависимотей, которые нам понадобятся
# для того, что бы установить зависимости питона. Так же добавляем
# нового пользователя в систему, что бы файлы не требовали root прав для
# редактирования. Эта команда добавляет в наш образ новый слой, второй.
RUN apk update && \
  apk add bash make gcc g++ postgresql-dev jpeg-dev zlib-dev && \
  adduser django --shell /bin/bash --home /home/django --disabled-password
# Копируем файлы с основной системы в наш образ.  COPY <файл на нашей системе> <файл в образе>
# Команда естественно создала новый слой, потому что добавила в образ новый файл. Если этот файл не изменяется,
# то следущая команда будет взята из кеша слоев. Как работает кеш слоев лучше обьяснить отдельно. Но
# в двух словах - "Если файлы не изменились, то нет смысла выполнять команду заново, потому что она опирается
# на данные содержащиеся в файлах образа, а следовательно, можно пропустить этот шаг и использовать уже ранее
# посчитанный результат ее выполнения, которым является слой.
COPY requirements.txt requirements.txt
# После того, как мы скопировали наши dependencies, мы их устанавливаем.
# RUN <команда, которую мы хотим выполнить>
RUN pip install -r requirements.txt
# Указываем путь к файлу вхождения.
ENTRYPOINT ["docker/entrypoint.sh"]
# Говорим, какого пользователя мы хотим использовать в качестве пользователя по умолчанию.
# Будем использовать того, которого добавили ранее в третьей команде.
USER django
# Задаем переменные среды по умолчанию. Конкретно эта переменная заставит python не использовать байтовы кеш.
# Это позволяет не захламлять систему. По сути, мы в данном случае ничего не выигрываем от того, что эти файлы есть,
# потому что сервер запустится один раз и надолго.
ENV PYTHONDONTWRITEBYTECODE=1
# Копируем все файлы из текущего контекста директории в рабочую директорию. Это нам понадобится, если мы решим
# запустить этот проект где то удаленно, пока мы просто будем поставлять файлы проекта с наших компьютеров напрямую.
COPY ./ ./
